<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Wed, 10 Feb 2021 17:31:58 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: jsPreprocessor</title>
		<dateCreated>Wed, 10 Feb 2021 15:34:21 GMT</dateCreated>
		<dateModified>Wed, 10 Feb 2021 17:31:58 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 7, 11, 13, 24</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>228</windowTop>
		<windowLeft>875</windowLeft>
		<windowBottom>1102</windowBottom>
		<windowRight>1965</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/jspreprocessor/">
			<outline text="notes" isComment="true">
				<outline text="Last time I played with this was 10/4/2020."/>
				</outline>
			<outline text="package.json">
				<outline text="{ ">
					<outline text="&quot;name&quot;: &quot;jsPreprocessor&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A simple JavaScript pre-processor to help get your project started.&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;compile.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;acorn-walk&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;acorn&quot;: &quot;*&quot;,"/>
						<outline text="&quot;escodegen&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="compile.js">
				<outline text="var myVersion = &quot;0.4.0&quot;, myProductName = &quot;jsPreprocessor&quot;;" created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const acorn = require (&quot;acorn&quot;);"/>
				<outline text="const escodegen = require (&quot;escodegen&quot;);"/>
				<outline text=""/>
				<outline text="const specialFunctionNames = {">
					<outline text="alabama: {">
						<outline text="},"/>
						</outline>
					<outline text="georgia: {">
						<outline text="},"/>
						</outline>
					<outline text="texas: {">
						<outline text="},"/>
						</outline>
					<outline text="minnesota: {">
						<outline text="},"/>
						</outline>
					<outline text="florida: {">
						<outline text="},"/>
						</outline>
					<outline text="utah: {">
						<outline text="}"/>
						</outline>
					<outline text="};"/>
					</outline>
				<outline text=""/>
				<outline text="function isSpecial (name) {">
					<outline text="for (var x in specialFunctionNames) {">
						<outline text="if (x == name) {">
							<outline text="return (true);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (false);"/>
					<outline text="}"/>
					</outline>
				<outline text="function visitCodeTree (theTree, visit) {">
					<outline text="var stack = new Array ();"/>
					<outline text="function doVisit (node) { //depth-first traversal">
						<outline text="for (var x in node) {">
							<outline text="if (typeof node [x] == &quot;object&quot;) {">
								<outline text="stack.push (node);"/>
								<outline text="doVisit (node [x], visit);"/>
								<outline text="stack.pop ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="if (node != null) {">
							<outline text="visit (node, stack);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="doVisit (theTree);"/>
					<outline text="}"/>
					</outline>
				<outline text="function upperCaseNames (code) {" isComment="true">
					<outline text="visitCodeTree (code, function (node) {">
						<outline text="if (node.name !== undefined) {">
							<outline text="node.name = utils.stringUpper (node.name);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function upperCaseSpecialNames (code) {" isComment="true">
					<outline text="visitCodeTree (code, function (node) {">
						<outline text="if (node.name !== undefined) {">
							<outline text="if (isSpecial (node.name)) {">
								<outline text="node.name = utils.stringUpper (node.name);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function fixSpecialFunctionCalls (theTree) {">
					<outline text="visitCodeTree (theTree, function (node, stack) {">
						<outline text="if (node.type == &quot;CallExpression&quot;) {">
							<outline text="if (node.callee !== undefined) {">
								<outline text="if (isSpecial (node.callee.name)) {">
									<outline text="var nodecopy = new Object ();"/>
									<outline text="for (var x in node) {">
										<outline text="nodecopy [x] = node [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="for (var x in node) {">
										<outline text="delete node [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="node.type = &quot;AwaitExpression&quot;;"/>
									<outline text="node.argument = nodecopy;"/>
									<outline text="console.log (&quot;special node: &quot; + utils.jsonStringify (node));" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (undefined); //don't replace"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion);"/>
				<outline text="fs.readFile (&quot;test.js&quot;, function (err, jstext) {">
					<outline text="if (err) {">
						<outline text="console.log (&quot;err.message == &quot; + err.message);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="console.log (&quot;\nsource text == \n&quot; + jstext + &quot;\n&quot;);"/>
						<outline text="var code = acorn.parse (jstext, {ecmaVersion: 2020});"/>
						<outline text="fixSpecialFunctionCalls (code);"/>
						<outline text="var jstext2 = escodegen.generate (code);"/>
						<outline text="console.log (&quot;\ngenerated text == \n&quot; + jstext2 + &quot;\n&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="# jsPreprocessor">
					<outline text="A simple JavaScript pre-processor to help get your project started."/>
					</outline>
				<outline text="### What it does">
					<outline text="We scan the source text of a JavaScript program in the file test.js looking for calls to a one of our special functions, indicated by its name appearing in the &lt;i&gt;specialFunctionNames&lt;/i&gt; object, adding the keyword await in front of the call. Any calls to functions not in this list are left alone. "/>
					<outline text="We use the &lt;a href=&quot;https://www.npmjs.com/package/acorn&quot;&gt;acorn&lt;/a&gt; parser to turn the original code into an AST. Then we do a depth-first traversal of the tree, looking for function calls and process them as described above"/>
					<outline text="Finally we turn the AST into JS text, using &lt;a href=&quot;https://www.npmjs.com/package/escodegen&quot;&gt;escodegen&lt;/a&gt;. It should be ready to run. "/>
					</outline>
				<outline text="### Notes">
					<outline text="The internal routine, visitCodeTree maintains a stack and passes it to the visit routine, but it isn't needed. "/>
					</outline>
				</outline>
			<outline text="test.js">
				<outline text="joan (pork (), texas (georgia ()));"/>
				<outline text="arnold ();"/>
				<outline text="mountain ();"/>
				</outline>
			<outline text="test.js" isComment="true">
				<outline text="function howLongUntilTrumpExpires () {">
					<outline text="var whenInaugration = new Date (&quot;Wed Jan 20 2021 11:59:59 GMT-0500 (Eastern Standard Time)&quot;);"/>
					<outline text="var now = new Date ();"/>
					<outline text="function howLongUntil (now, whenStart) { ">
						<outline text="Changes" isComment="true">
							<outline text="8/10/19; 4:05:14 PM by DW">
								<outline text="Returns an object with properties: years, months, days, hours, minutes, seconds."/>
								</outline>
							</outline>
						<outline text="function daysInYear (year) {">
							<outline text="var flLeapYear = ((year % 400) == 0) || ((year % 100) != 0 &amp;&amp; ((year % 4) == 0));"/>
							<outline text="return ((flLeapYear) ? 366 : 365);"/>
							<outline text="}"/>
							</outline>
						<outline text="function daysInMonth (month, year) { ">
							<outline text="return (new Date (year, month, 0).getDate ()); "/>
							<outline text="} "/>
							</outline>
						<outline text="function getnum (num, units) {">
							<outline text="if (num != 1) {">
								<outline text="units += &quot;s&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="return (num + &quot; &quot; + units);"/>
							<outline text="}"/>
							</outline>
						<outline text="const ctSecsInDay = 60 * 60 * 24;"/>
						<outline text="const ctMilliSecsInDay = 1000 * ctSecsInDay;"/>
						<outline text="const now = new Date ();" isComment="true"/>
						<outline text="var theYear = whenStart.getFullYear ();"/>
						<outline text="var ctDays = (now - whenStart) / ctMilliSecsInDay;"/>
						<outline text="var ctYears = 0;"/>
						<outline text="while (true) {">
							<outline text="if (ctDays &lt;= daysInYear (theYear)) {">
								<outline text="break;"/>
								<outline text="}"/>
								</outline>
							<outline text="ctDays -= daysInYear (theYear);"/>
							<outline text="ctYears++;"/>
							<outline text="theYear++;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var theMonth = 0, ctMonths = 0;"/>
						<outline text="while (true) {">
							<outline text=""/>
							<outline text="if (ctDays &lt; daysInMonth (theMonth, theYear)) {">
								<outline text="break;"/>
								<outline text="}"/>
								</outline>
							<outline text="ctDays -= daysInMonth (theMonth, theYear);"/>
							<outline text="ctMonths++;"/>
							<outline text="theMonth++;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="const ctWholeDays = Math.floor (ctDays);"/>
						<outline text="var ctRemainingSecs = (ctDays - ctWholeDays) * ctSecsInDay;"/>
						<outline text="var ctHours = Math.floor (ctRemainingSecs / (60 * 60));"/>
						<outline text="ctRemainingSecs -= ctHours * 60 * 60;"/>
						<outline text="var ctMinutes = Math.floor (ctRemainingSecs / 60);"/>
						<outline text="ctRemainingSecs -= ctMinutes * 60;"/>
						<outline text="ctRemainingSecs = Math.floor (ctRemainingSecs);"/>
						<outline text="return ({">
							<outline text="years: ctYears,"/>
							<outline text="months: ctMonths,"/>
							<outline text="days: ctWholeDays,"/>
							<outline text="hours: ctHours,"/>
							<outline text="minutes: ctMinutes,"/>
							<outline text="seconds: ctRemainingSecs"/>
							<outline text="});"/>
							</outline>
						<outline text="return (getnum (ctYears, &quot;year&quot;) + &quot;, &quot; + getnum (ctMonths, &quot;month&quot;) + &quot;, &quot; + getnum (ctWholeDays, &quot;day&quot;) + &quot;, &quot; + getnum (ctHours, &quot;hour&quot;) + &quot;, &quot; + getnum (ctMinutes, &quot;minute&quot;) + &quot;, &quot; + getnum (ctRemainingSecs, &quot;second&quot;) + &quot;.&quot;);" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="var howlong = howLongUntil (whenInaugration, now);"/>
					<outline text=""/>
					<outline text="var s = &quot;&quot;;"/>
					<outline text="function addnum (num, label) {">
						<outline text="if (num &gt; 0) {">
							<outline text="if (num == 1) {">
								<outline text="label = stringDelete (label, label.length, 1);"/>
								<outline text="}"/>
								</outline>
							<outline text="s += num + &quot; &quot; + label + &quot;, &quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="addnum (howlong.days, &quot;days&quot;);"/>
					<outline text="addnum (howlong.minutes, &quot;minutes&quot;);"/>
					<outline text="addnum (howlong.seconds, &quot;seconds&quot;);"/>
					<outline text="if (endsWith (s, &quot;, &quot;)) {">
						<outline text="s = stringDelete (s, s.length - 1, 2);"/>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;#idHowLong&quot;).html (s);"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="test.js" isComment="true">
				<outline text="async function hello (x) {">
					<outline text="await goodbye (12);"/>
					<outline text="}"/>
					</outline>
				<outline text="" isComment="true"/>
				<outline text="console.log (&quot;I love a parade.&quot;);" isComment="true"/>
				<outline text="" isComment="true"/>
				<outline text="await helloworld (12);" isComment="true"/>
				<outline text="" isComment="true"/>
				<outline text="//the first is called directly, the second via async/await" isComment="true">
					<outline text="//the syntax is the same because our preprocessor knows which need to be called in which manner"/>
					</outline>
				<outline text="console.log (quicklySquare (12)); " isComment="true"/>
				<outline text="console.log (remotelySquare (12));" isComment="true"/>
				<outline text=""/>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildJsPreprocessor ()"/>
			</outline>
		</body>
	</opml>
