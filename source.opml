<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Wed, 10 Feb 2021 15:55:40 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: jsPreprocessor</title>
		<dateCreated>Wed, 10 Feb 2021 15:34:21 GMT</dateCreated>
		<dateModified>Wed, 10 Feb 2021 15:55:40 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 5, 23, 24, 26, 30, 34</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>228</windowTop>
		<windowLeft>875</windowLeft>
		<windowBottom>1102</windowBottom>
		<windowRight>1965</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/jspreprocessor/">
			<outline text="notes" isComment="true">
				<outline text="Last time I played with this was 10/4/2020."/>
				</outline>
			<outline text="package.json">
				<outline text="{ ">
					<outline text="&quot;name&quot;: &quot;jsPreprocessor&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A simple JavaScript pre-processor to help get your project started.&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;compile.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;acorn-walk&quot;: &quot;*&quot;," isComment="true"/>
						<outline text="&quot;acorn&quot;: &quot;*&quot;,"/>
						<outline text="&quot;escodegen&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="compile.js">
				<outline text="var myVersion = &quot;0.4.0&quot;, myProductName = &quot;jsPreprocessor&quot;;" created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const acorn = require (&quot;acorn&quot;);"/>
				<outline text="const escodegen = require (&quot;escodegen&quot;);"/>
				<outline text=""/>
				<outline text="const specialFunctionNames = {">
					<outline text="alabama: {">
						<outline text="},"/>
						</outline>
					<outline text="georgia: {">
						<outline text="},"/>
						</outline>
					<outline text="texas: {">
						<outline text="},"/>
						</outline>
					<outline text="minnesota: {">
						<outline text="},"/>
						</outline>
					<outline text="florida: {">
						<outline text="},"/>
						</outline>
					<outline text="utah: {">
						<outline text="}"/>
						</outline>
					<outline text="};"/>
					</outline>
				<outline text=""/>
				<outline text="function isSpecial (name) {">
					<outline text="for (var x in specialFunctionNames) {">
						<outline text="if (x == name) {">
							<outline text="return (true);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (false);"/>
					<outline text="}"/>
					</outline>
				<outline text="function visitCodeTree (theTree, visit) {">
					<outline text="var stack = new Array ();"/>
					<outline text="function doVisit (node) { //depth-first traversal">
						<outline text="for (var x in node) {">
							<outline text="if (typeof node [x] == &quot;object&quot;) {">
								<outline text="stack.push (node);"/>
								<outline text="doVisit (node [x], visit);"/>
								<outline text="stack.pop ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="var replacewith = visit (node, stack);"/>
						<outline text="if (replacewith !== undefined) {">
							<outline text="console.log (&quot;replacewith == &quot; + utils.jsonStringify (replacewith));"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="doVisit (theTree);"/>
					<outline text="}"/>
					</outline>
				<outline text="function upperCaseNames (code) {" isComment="true">
					<outline text="visitCodeTree (code, function (node) {">
						<outline text="if (node.name !== undefined) {">
							<outline text="node.name = utils.stringUpper (node.name);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function upperCaseSpecialNames (code) {" isComment="true">
					<outline text="visitCodeTree (code, function (node) {">
						<outline text="if (node.name !== undefined) {">
							<outline text="if (isSpecial (node.name)) {">
								<outline text="node.name = utils.stringUpper (node.name);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function fixSpecialFunctionCalls (theTree) {">
					<outline text="visitCodeTree (theTree, function (node, stack) {">
						<outline text="if (node.type == &quot;CallExpression&quot;) {">
							<outline text="if (node.callee !== undefined) {">
								<outline text="if (isSpecial (node.callee.name)) {">
									<outline text="var nodecopy = new Object ();"/>
									<outline text="for (var x in node) {">
										<outline text="nodecopy [x] = node [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="for (var x in node) {">
										<outline text="delete node [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="node.type = &quot;AwaitExpression&quot;;"/>
									<outline text="node.argument = nodecopy;"/>
									<outline text="console.log (&quot;special node: &quot; + utils.jsonStringify (node));"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (undefined); //don't replace"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="console.log (myProductName + &quot; v&quot; + myVersion);"/>
				<outline text="fs.readFile (&quot;test.js&quot;, function (err, jstext) {">
					<outline text="if (err) {">
						<outline text="console.log (&quot;err.message == &quot; + err.message);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="var code = acorn.parse (jstext, {ecmaVersion: 2020});"/>
						<outline text="fixSpecialFunctionCalls (code);"/>
						<outline text="var jstext2 = escodegen.generate (code);"/>
						<outline text="console.log (jstext2);"/>
						<outline text="}"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="# jsPreprocessor">
					<outline text="A simple JavaScript pre-processor to help get your project started."/>
					</outline>
				<outline text="### The story">
					<outline text="We scan the source text of a JavaScript program in the file test.js looking for calls to a one of our special functions, indicated by its name appearing in the &lt;i&gt;specialFunctionNames&lt;/i&gt; object, adding the keyword await in front of the call. Any calls to functions not in this list are left alone. "/>
					<outline text="We use the acorn parser to turn the original code into an AST. Then we do a depth-first traversal of the tree, looking for function calls and process them as described above"/>
					<outline text="Finally we turn the AST into JS text, using escodegen. It should be ready to run. "/>
					</outline>
				<outline text="### Notes">
					<outline text="visitCodeTree maintains a stack and passes it to the visit routine, but it isn't needed. "/>
					</outline>
				</outline>
			<outline text="test.js">
				<outline text="joan (pork (), texas (georgia ()));"/>
				<outline text="arnold ();"/>
				<outline text="mountain ();"/>
				</outline>
			<outline text="test.js" isComment="true">
				<outline text="async function hello (x) {">
					<outline text="await goodbye (12);"/>
					<outline text="}"/>
					</outline>
				<outline text="" isComment="true"/>
				<outline text="console.log (&quot;I love a parade.&quot;);" isComment="true"/>
				<outline text="" isComment="true"/>
				<outline text="await helloworld (12);" isComment="true"/>
				<outline text="" isComment="true"/>
				<outline text="//the first is called directly, the second via async/await" isComment="true">
					<outline text="//the syntax is the same because our preprocessor knows which need to be called in which manner"/>
					</outline>
				<outline text="console.log (quicklySquare (12)); " isComment="true"/>
				<outline text="console.log (remotelySquare (12));" isComment="true"/>
				<outline text=""/>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildJsPreprocessor ()"/>
			</outline>
		</body>
	</opml>
